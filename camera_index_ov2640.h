//File: index_ov2640.html

// Lines 11-362 CSS, Lines 367-588 Body, Lines 590-809 JS
const uint8_t index_ov2640_html[] PROGMEM = R"=====(<!doctype html><html> <head> <meta charset="utf-8"> <meta name="viewport" content="width=device-width,initial-scale=1"> <title id="title">ESP32 OV2640</title> <link rel="shortcut icon" href="https://www.flaticon.com/svg/static/icons/svg/61/61624.svg"> <style>/* Universal Styles */body{font-family: Arial, Helvetica, sans-serif; background: #181818; color: #EFEFEF; font-size: 1rem;}h1,h2{text-align: center;}#bodyContainer{margin: 2.5% 10%;}/* Camera Container */#cameraCont{display: flex;}#stream{width: 70%}#cameraSettings{width: 30%; flex-wrap: nowrap; min-width: 340px; background: #363636; padding: 8px; margin-right: 10px;}/* Camera Settings */.settingGroup{display: flex; flex-wrap: nowrap; line-height: 22px; margin: 1em 0;}.settingGroup>label{display: inline-block; padding-right: 10px; min-width: 35%}/* Range Bits */input[type=range]{-webkit-appearance: none; width: 100%; height: 22px; background: #363636; cursor: pointer; margin: 0}input[type=range]:focus{outline: 0}input[type=range]::-webkit-slider-runnable-track{width: 100%; height: 2px; cursor: pointer; background: #EFEFEF; border-radius: 0; border: 0 solid #EFEFEF}input[type=range]::-webkit-slider-thumb{border: 1px solid rgba(0, 0, 30, 0); height: 22px; width: 22px; border-radius: 50px; background: #ff3034; cursor: pointer; -webkit-appearance: none; margin-top: -11.5px}input[type=range]:focus::-webkit-slider-runnable-track{background: #EFEFEF}input[type=range]::-moz-range-track{width: 100%; height: 2px; cursor: pointer; background: #EFEFEF; border-radius: 0; border: 0 solid #EFEFEF}input[type=range]::-moz-range-thumb{border: 1px solid rgba(0, 0, 30, 0); height: 22px; width: 22px; border-radius: 50px; background: #ff3034; cursor: pointer}input[type=range]::-ms-track{width: 100%; height: 2px; cursor: pointer; background: 0 0; border-color: transparent; color: transparent}input[type=range]::-ms-fill-lower{background: #EFEFEF; border: 0 solid #EFEFEF; border-radius: 0}input[type=range]::-ms-fill-upper{background: #EFEFEF; border: 0 solid #EFEFEF; border-radius: 0}input[type=range]::-ms-thumb{border: 1px solid rgba(0, 0, 30, 0); height: 22px; width: 22px; border-radius: 50px; background: #ff3034; cursor: pointer; height: 2px}input[type=range]:focus::-ms-fill-lower{background: #EFEFEF}input[type=range]:focus::-ms-fill-upper{background: #363636}.range-max,.range-min{display: inline-block; padding: 0 5px}/* Sliders */.switch{display: block; position: relative; line-height: 22px; font-size: 16px; height: 22px}.switch input{outline: 0; opacity: 0; width: 0; height: 0}.slider{width: 50px; height: 22px; border-radius: 22px; cursor: pointer; background-color: grey}.slider,.slider:before{display: inline-block; transition: .4s}.slider:before{position: relative; content: ""; border-radius: 50%; height: 16px; width: 16px; left: 4px; top: 3px; background-color: #fff}input:checked+.slider{background-color: #ff3034}input:checked+.slider:before{-webkit-transform: translateX(26px); transform: translateX(26px)}select{border: 1px solid #363636; font-size: 14px; height: 22px; outline: 0; border-radius: 5px}button{margin: 5px; border: 0; line-height: 28px; cursor: pointer; color: #fff; background: #ff3034; border-radius: 5px; font-size: 1rem; outline: 0;}button:hover{background: #ff494d;}button:active{background: #f21c21;}@media only screen and (max-width: 600px){body{margin-left: 0;}#bodyContainer{margin: 2.5% 0;}#cameraCont{display: block;}#stream{width: 100%;}#cameraSettings{display: inline-block; width: 90%; padding: 5%;}}</style> </head><body> <h1>Cat Feeder UI v2</h1> <hr> <div id="bodyContainer"> <div id="cameraCont"> <img id="stream" src="https://cdn.discordapp.com/attachments/436028344279105548/760062268666281994/cat.png"> <div id="cameraSettings"> <h2>Camera</h2> <hr> <div id="settings"> <div class="settingGroup" id="lampSetting"> <label for="lamp">Light</label> <div class="range-min">Off</div><input type="range" id="lamp" min="0" max="100" value="0" class="settingUpdate"> <div class="range-max">Full</div></div><div class="settingGroup" id="brightnessSetting"> <label for="brightness">Brightness</label> <div class="range-min">-2</div><input type="range" id="brightness" min="-2" max="2" value="0" class="settingUpdate"> <div class="range-max">2</div></div><div id="streamSettings"> <button id="get-still" style="float:left;">Get Still</button> <button id="toggle-stream" style="float:left;">Start Stream</button> </div><br><br><br><br><br></div><br><h2>Feeder Settings</h2> <hr> <div class="settingGroup" id="timeSetting"> <label for="currentTime">Set Feeder Time:</label> <input type="time" id="currentTime"> </div><div class="settingGroup" id="feedSizeSetting"> <label for="feedSize">Feed Size</label> <select id="feedSize" class="default-action"> <option value="0">Small </option> <option value="1" selected="selected">Medium</option> <option value="2">Large</option> </select> </div><div class="settingGroup" id="feed1Setting"> <label for="feed1Time">Feed Time #1:</label> <input type="time" id="feed1Time"> </div><div class="settingGroup" id="feed2Setting"> <label for="feed2Time">Feed Time #2:</label> <input type="time" id="feed2Time"> </div><div class="settingGroup" id="submitFeeder"> <button class="navButon" id="submit">Submit</button> </div></div></div></body> <script>document.addEventListener('DOMContentLoaded', function (event){var baseHost=document.location.origin; var streamUrl=baseHost + ':81'; const hide=el=>{el.classList.add('hidden');}; const show=el=>{el.classList.remove('hidden');}; const disable=el=>{el.classList.add('disabled'); el.disabled=true;}; const enable=el=>{el.classList.remove('disabled'); el.disabled=false;}; const updateValue=(el, value, updateRemote)=>{updateRemote=updateRemote==null ? true : updateRemote; let initialValue; if (el.type==='checkbox'){initialValue=el.checked; value=!!value; el.checked=value;}else{initialValue=el.value; el.value=value;}const lampGroup=document.getElementById('lampSetting'); const camName=document.getElementById('cam_name'); const codeVer=document.getElementById('code_ver'); const rotate=document.getElementById('rotate'); if (updateRemote && initialValue !==value){updateConfig(el);}else if (!updateRemote){if (el.id==="aec"){value ? hide(exposure) : show(exposure);}else if (el.id==="agc"){if (value){show(gainCeiling); hide(agcGain);}else{hide(gainCeiling); show(agcGain);}}else if (el.id==="awb_gain"){value ? show(wb) : hide(wb);}else if (el.id==="lamp"){if (value==-1){hide(lampGroup);}else{show(lampGroup);}}else if (el.id==="cam_name"){camName.innerHTML=value; window.document.title=value;}else if (el.id==="code_ver"){codeVer.innerHTML=value;}else if (el.id==="rotate"){rotate.value=value; // setting value does not induce a onchange event // this sets the figure transform css values rotate.onchange();}}}; function updateConfig(el){let value; switch (el.type){case 'checkbox': value=el.checked ? 1 : 0; break; case 'range': case 'select-one': value=el.value; break; case 'button': case 'submit': value='1'; break; default: return;}const query=`${baseHost}/control?var=${el.id}&val=${value}`; fetch(query) .then(response=>{console.log(`request to ${query}finished, status: ${response.status}`);});}document .querySelectorAll('.close') .forEach(el=>{el.onclick=()=>{hide(el.parentNode);};}); // read initial values fetch(`${baseHost}/status`) .then(function (response){return response.json();}) .then(function (state){document .querySelectorAll('.default-action') .forEach(el=>{updateValue(el, state[el.id], false);});}); const view=document.getElementById('stream'); const stillButton=document.getElementById('get-still'); const streamButton=document.getElementById('toggle-stream'); const stopStream=()=>{window.stop(); streamButton.innerHTML='Start Stream';}; const startStream=()=>{view.src=`${streamUrl}/stream`; view.scrollIntoView(false); streamButton.innerHTML='Stop Stream';}; // Attach actions to buttons stillButton.onclick=()=>{stopStream(); view.src=`${baseHost}/capture?_cb=${Date.now()}`; view.scrollIntoView(false);}; streamButton.onclick=()=>{const streamEnabled=streamButton.innerHTML==='Stop Stream'; if (streamEnabled){stopStream();}else{startStream();}}; // Attach default on change action document .querySelectorAll('.settingUpdate') .forEach(el=>{el.onchange=()=> updateConfig(el);});}); </script></html>)=====";
size_t index_ov2640_html_len = sizeof(index_ov2640_html);
